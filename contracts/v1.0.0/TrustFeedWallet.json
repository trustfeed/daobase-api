{
  "contractName": "TrustFeedWallet",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "confirmations",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "name": "destination",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "data",
          "type": "bytes"
        },
        {
          "name": "executed",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "transactionCount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAX_OWNER_COUNT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_owners",
          "type": "address[]"
        },
        {
          "name": "_required",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Confirmation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Revocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Submission",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Execution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "ExecutionFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerRemoval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "RequirementChange",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "replaceOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_required",
          "type": "uint256"
        }
      ],
      "name": "changeRequirement",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "destination",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "submitTransaction",
      "outputs": [
        {
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "confirmTransaction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "revokeConfirmation",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "executeTransaction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "isConfirmed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmationCount",
      "outputs": [
        {
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "pending",
          "type": "bool"
        },
        {
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionCount",
      "outputs": [
        {
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmations",
      "outputs": [
        {
          "name": "_confirmations",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "from",
          "type": "uint256"
        },
        {
          "name": "to",
          "type": "uint256"
        },
        {
          "name": "pending",
          "type": "bool"
        },
        {
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionIds",
      "outputs": [
        {
          "name": "_transactionIds",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200185c3803806200185c8339810160405280516020820151910180519091906000908260048211806200004857508181115b8062000052575080155b806200005c575081155b156200006757600080fd5b600092505b84518310156200013b576002600086858151811015156200008957fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff1680620000dc57508483815181101515620000c557fe5b90602001906020020151600160a060020a03166000145b15620000e757600080fd5b6001600260008786815181101515620000fc57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055600192909201916200006c565b84516200015090600390602088019062000162565b50505060049190915550620001f69050565b828054828255906000526020600020908101928215620001ba579160200282015b82811115620001ba5782518254600160a060020a031916600160a060020a0390911617825560209092019160019091019062000183565b50620001c8929150620001cc565b5090565b620001f391905b80821115620001c8578054600160a060020a0319168155600101620001d3565b90565b61165680620002066000396000f30060806040526004361061011c5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025e7c27811461015e578063173825d91461019f57806320ea8d86146101cd5780632f54bf6e146101e55780633411c81c1461022757806354741525146102585780637065cb4814610289578063784547a7146102b75780638b51d13f146102cf5780639ace38c2146102e7578063a0e67e2b146103bc578063a8abe69a14610421578063b5dc40c314610446578063b77bf6001461045e578063ba51a6df14610473578063c01a8c841461048b578063c6427474146104a3578063d74f8edd14610519578063dc8452cd1461052e578063e20056e614610543578063ee22610b14610577575b600034111561015c5760408051348152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25b005b34801561016a57600080fd5b5061017660043561058f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156101ab57600080fd5b5061015c73ffffffffffffffffffffffffffffffffffffffff600435166105c4565b3480156101d957600080fd5b5061015c6004356107a3565b3480156101f157600080fd5b5061021373ffffffffffffffffffffffffffffffffffffffff6004351661085d565b604080519115158252519081900360200190f35b34801561023357600080fd5b5061021360043573ffffffffffffffffffffffffffffffffffffffff60243516610872565b34801561026457600080fd5b5061027760043515156024351515610892565b60408051918252519081900360200190f35b34801561029557600080fd5b5061015c73ffffffffffffffffffffffffffffffffffffffff600435166108fe565b3480156102c357600080fd5b50610213600435610a4d565b3480156102db57600080fd5b50610277600435610ade565b3480156102f357600080fd5b506102ff600435610b5a565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b8381101561037e578181015183820152602001610366565b50505050905090810190601f1680156103ab5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156103c857600080fd5b506103d1610c25565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561040d5781810151838201526020016103f5565b505050509050019250505060405180910390f35b34801561042d57600080fd5b506103d160043560243560443515156064351515610c95565b34801561045257600080fd5b506103d1600435610dce565b34801561046a57600080fd5b50610277610f7b565b34801561047f57600080fd5b5061015c600435610f81565b34801561049757600080fd5b5061015c600435610ff8565b3480156104af57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261027794823573ffffffffffffffffffffffffffffffffffffffff169460248035953695946064949201919081908401838280828437509497506110d09650505050505050565b34801561052557600080fd5b506102776110ef565b34801561053a57600080fd5b506102776110f4565b34801561054f57600080fd5b5061015c73ffffffffffffffffffffffffffffffffffffffff600435811690602435166110fa565b34801561058357600080fd5b5061015c6004356112ec565b600380548290811061059d57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60003330146105d257600080fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040902054829060ff16151561060857600080fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260408120805460ff1916905591505b60035460001901821015610731578273ffffffffffffffffffffffffffffffffffffffff1660038381548110151561066c57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415610726576003805460001981019081106106a657fe5b6000918252602090912001546003805473ffffffffffffffffffffffffffffffffffffffff90921691849081106106d957fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610731565b600190910190610638565b600380546000190190610744908261156e565b50600354600454111561075d5760035461075d90610f81565b60405173ffffffffffffffffffffffffffffffffffffffff8416907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a2505050565b3360008181526002602052604090205460ff1615156107c157600080fd5b60008281526001602090815260408083203380855292529091205483919060ff1615156107ed57600080fd5b600084815260208190526040902060030154849060ff161561080e57600080fd5b6000858152600160209081526040808320338085529252808320805460ff191690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b60026020526000908152604090205460ff1681565b600160209081526000928352604080842090915290825290205460ff1681565b6000805b6005548110156108f7578380156108bf575060008181526020819052604090206003015460ff16155b806108e357508280156108e3575060008181526020819052604090206003015460ff165b156108ef576001820191505b600101610896565b5092915050565b33301461090a57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040902054819060ff161561093f57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff8116151561096257600080fd5b600380549050600101600454600482118061097c57508181115b80610985575080155b8061098e575081155b1561099857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8516600081815260026020526040808220805460ff1916600190811790915560038054918201815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a25050505050565b600080805b600354811015610ad75760008481526001602052604081206003805491929184908110610a7b57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff1615610abc576001820191505b600454821415610acf5760019250610ad7565b600101610a52565b5050919050565b6000805b600354811015610b545760008381526001602052604081206003805491929184908110610b0b57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff1615610b4c576001820191505b600101610ae2565b50919050565b6000602081815291815260409081902080546001808301546002808501805487516101009582161595909502600019011691909104601f810188900488028401880190965285835273ffffffffffffffffffffffffffffffffffffffff90931695909491929190830182828015610c125780601f10610be757610100808354040283529160200191610c12565b820191906000526020600020905b815481529060010190602001808311610bf557829003601f168201915b5050506003909301549192505060ff1684565b60606003805480602002602001604051908101604052809291908181526020018280548015610c8a57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610c5f575b505050505090505b90565b606080600080600554604051908082528060200260200182016040528015610cc7578160200160208202803883390190505b50925060009150600090505b600554811015610d4e57858015610cfc575060008181526020819052604090206003015460ff16155b80610d205750848015610d20575060008181526020819052604090206003015460ff165b15610d4657808383815181101515610d3457fe5b60209081029091010152600191909101905b600101610cd3565b878703604051908082528060200260200182016040528015610d7a578160200160208202803883390190505b5093508790505b86811015610dc3578281815181101515610d9757fe5b9060200190602002015184898303815181101515610db157fe5b60209081029091010152600101610d81565b505050949350505050565b606080600080600380549050604051908082528060200260200182016040528015610e03578160200160208202803883390190505b50925060009150600090505b600354811015610ee75760008581526001602052604081206003805491929184908110610e3857fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff1615610edf576003805482908110610e8057fe5b600091825260209091200154835173ffffffffffffffffffffffffffffffffffffffff90911690849084908110610eb357fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830290910190910152600191909101905b600101610e0f565b81604051908082528060200260200182016040528015610f11578160200160208202803883390190505b509350600090505b81811015610f73578281815181101515610f2f57fe5b906020019060200201518482815181101515610f4757fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830290910190910152600101610f19565b505050919050565b60055481565b333014610f8d57600080fd5b600354816004821180610f9f57508181115b80610fa8575080155b80610fb1575081155b15610fbb57600080fd5b60048390556040805184815290517fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9181900360200190a1505050565b3360008181526002602052604090205460ff16151561101657600080fd5b600082815260208190526040902054829073ffffffffffffffffffffffffffffffffffffffff16151561104857600080fd5b60008381526001602090815260408083203380855292529091205484919060ff161561107357600080fd5b6000858152600160208181526040808420338086529252808420805460ff1916909317909255905187927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a36110c9856112ec565b5050505050565b60006110dd848484611459565b90506110e881610ff8565b9392505050565b600481565b60045481565b600033301461110857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260026020526040902054839060ff16151561113e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260026020526040902054839060ff161561117357600080fd5b600092505b600354831015611238578473ffffffffffffffffffffffffffffffffffffffff166003848154811015156111a857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16141561122d57836003848154811015156111e057fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611238565b600190920191611178565b73ffffffffffffffffffffffffffffffffffffffff808616600081815260026020526040808220805460ff1990811690915593881682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a260405173ffffffffffffffffffffffffffffffffffffffff8516907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a25050505050565b600081815260208190526040812060030154829060ff161561130d57600080fd5b61131683610a4d565b15611454576000838152602081905260409081902060038101805460ff1916600190811790915581548183015493516002808501805495985073ffffffffffffffffffffffffffffffffffffffff909316959492939192839285926000199183161561010002919091019091160480156113d15780601f106113a6576101008083540402835291602001916113d1565b820191906000526020600020905b8154815290600101906020018083116113b457829003601f168201915b505091505060006040518083038185875af1925050501561141c5760405183907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a2611454565b60405183907f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923690600090a260038201805460ff191690555b505050565b60008373ffffffffffffffffffffffffffffffffffffffff8116151561147e57600080fd5b6005546040805160808101825273ffffffffffffffffffffffffffffffffffffffff8881168252602080830189815283850189815260006060860181905287815280845295909520845181547fffffffffffffffffffffffff00000000000000000000000000000000000000001694169390931783555160018301559251805194965091939092611516926002850192910190611592565b50606091909101516003909101805460ff191691151591909117905560058054600101905560405182907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a2509392505050565b81548183558181111561145457600083815260209020611454918101908301611610565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106115d357805160ff1916838001178555611600565b82800160010185558215611600579182015b828111156116005782518255916020019190600101906115e5565b5061160c929150611610565b5090565b610c9291905b8082111561160c57600081556001016116165600a165627a7a72305820bc8c91c440ca529984441e4a2ce8ee1a4b2c8e4efb678ece425d19280b66f72d0029",
  "deployedBytecode": "0x60806040526004361061011c5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025e7c27811461015e578063173825d91461019f57806320ea8d86146101cd5780632f54bf6e146101e55780633411c81c1461022757806354741525146102585780637065cb4814610289578063784547a7146102b75780638b51d13f146102cf5780639ace38c2146102e7578063a0e67e2b146103bc578063a8abe69a14610421578063b5dc40c314610446578063b77bf6001461045e578063ba51a6df14610473578063c01a8c841461048b578063c6427474146104a3578063d74f8edd14610519578063dc8452cd1461052e578063e20056e614610543578063ee22610b14610577575b600034111561015c5760408051348152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25b005b34801561016a57600080fd5b5061017660043561058f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156101ab57600080fd5b5061015c73ffffffffffffffffffffffffffffffffffffffff600435166105c4565b3480156101d957600080fd5b5061015c6004356107a3565b3480156101f157600080fd5b5061021373ffffffffffffffffffffffffffffffffffffffff6004351661085d565b604080519115158252519081900360200190f35b34801561023357600080fd5b5061021360043573ffffffffffffffffffffffffffffffffffffffff60243516610872565b34801561026457600080fd5b5061027760043515156024351515610892565b60408051918252519081900360200190f35b34801561029557600080fd5b5061015c73ffffffffffffffffffffffffffffffffffffffff600435166108fe565b3480156102c357600080fd5b50610213600435610a4d565b3480156102db57600080fd5b50610277600435610ade565b3480156102f357600080fd5b506102ff600435610b5a565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b8381101561037e578181015183820152602001610366565b50505050905090810190601f1680156103ab5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156103c857600080fd5b506103d1610c25565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561040d5781810151838201526020016103f5565b505050509050019250505060405180910390f35b34801561042d57600080fd5b506103d160043560243560443515156064351515610c95565b34801561045257600080fd5b506103d1600435610dce565b34801561046a57600080fd5b50610277610f7b565b34801561047f57600080fd5b5061015c600435610f81565b34801561049757600080fd5b5061015c600435610ff8565b3480156104af57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261027794823573ffffffffffffffffffffffffffffffffffffffff169460248035953695946064949201919081908401838280828437509497506110d09650505050505050565b34801561052557600080fd5b506102776110ef565b34801561053a57600080fd5b506102776110f4565b34801561054f57600080fd5b5061015c73ffffffffffffffffffffffffffffffffffffffff600435811690602435166110fa565b34801561058357600080fd5b5061015c6004356112ec565b600380548290811061059d57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60003330146105d257600080fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040902054829060ff16151561060857600080fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260408120805460ff1916905591505b60035460001901821015610731578273ffffffffffffffffffffffffffffffffffffffff1660038381548110151561066c57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415610726576003805460001981019081106106a657fe5b6000918252602090912001546003805473ffffffffffffffffffffffffffffffffffffffff90921691849081106106d957fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610731565b600190910190610638565b600380546000190190610744908261156e565b50600354600454111561075d5760035461075d90610f81565b60405173ffffffffffffffffffffffffffffffffffffffff8416907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a2505050565b3360008181526002602052604090205460ff1615156107c157600080fd5b60008281526001602090815260408083203380855292529091205483919060ff1615156107ed57600080fd5b600084815260208190526040902060030154849060ff161561080e57600080fd5b6000858152600160209081526040808320338085529252808320805460ff191690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b60026020526000908152604090205460ff1681565b600160209081526000928352604080842090915290825290205460ff1681565b6000805b6005548110156108f7578380156108bf575060008181526020819052604090206003015460ff16155b806108e357508280156108e3575060008181526020819052604090206003015460ff165b156108ef576001820191505b600101610896565b5092915050565b33301461090a57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040902054819060ff161561093f57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff8116151561096257600080fd5b600380549050600101600454600482118061097c57508181115b80610985575080155b8061098e575081155b1561099857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8516600081815260026020526040808220805460ff1916600190811790915560038054918201815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a25050505050565b600080805b600354811015610ad75760008481526001602052604081206003805491929184908110610a7b57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff1615610abc576001820191505b600454821415610acf5760019250610ad7565b600101610a52565b5050919050565b6000805b600354811015610b545760008381526001602052604081206003805491929184908110610b0b57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff1615610b4c576001820191505b600101610ae2565b50919050565b6000602081815291815260409081902080546001808301546002808501805487516101009582161595909502600019011691909104601f810188900488028401880190965285835273ffffffffffffffffffffffffffffffffffffffff90931695909491929190830182828015610c125780601f10610be757610100808354040283529160200191610c12565b820191906000526020600020905b815481529060010190602001808311610bf557829003601f168201915b5050506003909301549192505060ff1684565b60606003805480602002602001604051908101604052809291908181526020018280548015610c8a57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610c5f575b505050505090505b90565b606080600080600554604051908082528060200260200182016040528015610cc7578160200160208202803883390190505b50925060009150600090505b600554811015610d4e57858015610cfc575060008181526020819052604090206003015460ff16155b80610d205750848015610d20575060008181526020819052604090206003015460ff165b15610d4657808383815181101515610d3457fe5b60209081029091010152600191909101905b600101610cd3565b878703604051908082528060200260200182016040528015610d7a578160200160208202803883390190505b5093508790505b86811015610dc3578281815181101515610d9757fe5b9060200190602002015184898303815181101515610db157fe5b60209081029091010152600101610d81565b505050949350505050565b606080600080600380549050604051908082528060200260200182016040528015610e03578160200160208202803883390190505b50925060009150600090505b600354811015610ee75760008581526001602052604081206003805491929184908110610e3857fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff1615610edf576003805482908110610e8057fe5b600091825260209091200154835173ffffffffffffffffffffffffffffffffffffffff90911690849084908110610eb357fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830290910190910152600191909101905b600101610e0f565b81604051908082528060200260200182016040528015610f11578160200160208202803883390190505b509350600090505b81811015610f73578281815181101515610f2f57fe5b906020019060200201518482815181101515610f4757fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830290910190910152600101610f19565b505050919050565b60055481565b333014610f8d57600080fd5b600354816004821180610f9f57508181115b80610fa8575080155b80610fb1575081155b15610fbb57600080fd5b60048390556040805184815290517fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9181900360200190a1505050565b3360008181526002602052604090205460ff16151561101657600080fd5b600082815260208190526040902054829073ffffffffffffffffffffffffffffffffffffffff16151561104857600080fd5b60008381526001602090815260408083203380855292529091205484919060ff161561107357600080fd5b6000858152600160208181526040808420338086529252808420805460ff1916909317909255905187927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a36110c9856112ec565b5050505050565b60006110dd848484611459565b90506110e881610ff8565b9392505050565b600481565b60045481565b600033301461110857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260026020526040902054839060ff16151561113e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260026020526040902054839060ff161561117357600080fd5b600092505b600354831015611238578473ffffffffffffffffffffffffffffffffffffffff166003848154811015156111a857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16141561122d57836003848154811015156111e057fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611238565b600190920191611178565b73ffffffffffffffffffffffffffffffffffffffff808616600081815260026020526040808220805460ff1990811690915593881682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a260405173ffffffffffffffffffffffffffffffffffffffff8516907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a25050505050565b600081815260208190526040812060030154829060ff161561130d57600080fd5b61131683610a4d565b15611454576000838152602081905260409081902060038101805460ff1916600190811790915581548183015493516002808501805495985073ffffffffffffffffffffffffffffffffffffffff909316959492939192839285926000199183161561010002919091019091160480156113d15780601f106113a6576101008083540402835291602001916113d1565b820191906000526020600020905b8154815290600101906020018083116113b457829003601f168201915b505091505060006040518083038185875af1925050501561141c5760405183907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a2611454565b60405183907f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923690600090a260038201805460ff191690555b505050565b60008373ffffffffffffffffffffffffffffffffffffffff8116151561147e57600080fd5b6005546040805160808101825273ffffffffffffffffffffffffffffffffffffffff8881168252602080830189815283850189815260006060860181905287815280845295909520845181547fffffffffffffffffffffffff00000000000000000000000000000000000000001694169390931783555160018301559251805194965091939092611516926002850192910190611592565b50606091909101516003909101805460ff191691151591909117905560058054600101905560405182907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a2509392505050565b81548183558181111561145457600083815260209020611454918101908301611610565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106115d357805160ff1916838001178555611600565b82800160010185558215611600579182015b828111156116005782518255916020019190600101906115e5565b5061160c929150611610565b5090565b610c9291905b8082111561160c57600081556001016116165600a165627a7a72305820bc8c91c440ca529984441e4a2ce8ee1a4b2c8e4efb678ece425d19280b66f72d0029",
  "sourceMap": "47:11362:8:-;;;2694:358;8:9:-1;5:2;;;30:1;27;20:12;5:2;2694:358:8;;;;;;;;;;;;;;;;;;;;;;2781:14;;2694:358;;;2827:6;;2694:358;117:1;2096:28;;;:66;;;2152:10;2140:9;:22;2096:66;:96;;;-1:-1:-1;2178:14:8;;2096:96;:127;;;-1:-1:-1;2208:15:8;;2096:127;2089:153;;;2237:5;;;2089:153;2834:1;2827:8;;2822:168;2839:7;:14;2837:1;:16;2822:168;;;2878:7;:19;2886:7;2894:1;2886:10;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2878:19:8;;;;;;;;;;;-1:-1:-1;2878:19:8;;;;;:38;;;2901:7;2909:1;2901:10;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2901:15:8;2915:1;2901:15;2878:38;2874:65;;;2934:5;;;2874:65;2975:4;2953:7;:19;2961:7;2969:1;2961:10;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2953:19:8;;;;;;;;;;;-1:-1:-1;2953:19:8;:26;;-1:-1:-1;;2953:26:8;;;;;;;;;;-1:-1:-1;2855:3:8;;;;;2822:168;;;2999:16;;;;:6;;:16;;;;;:::i;:::-;-1:-1:-1;;;3025:8:8;:20;;;;-1:-1:-1;47:11362:8;;-1:-1:-1;47:11362:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;47:11362:8;-1:-1:-1;;;;;47:11362:8;;;;;;;;;;;-1:-1:-1;47:11362:8;;;;;;;-1:-1:-1;47:11362:8;;;-1:-1:-1;47:11362:8;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;;47:11362:8;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "47:11362:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2394:1;2382:9;:13;2378:66;;;2414:30;;;2434:9;2414:30;;;;2422:10;;2414:30;;;;;;;;;;2378:66;47:11362;796:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;796:23:8;;;;;;;;;;;;;;;;;;;;;;;;3584:465;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3584:465:8;;;;;;;6172:296;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6172:296:8;;;;;750:40;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;750:40:8;;;;;;;;;;;;;;;;;;;;;;;;;680:64;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;680:64:8;;;;;;;;;9110:319;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;9110:319:8;;;;;;;;;;;;;;;;;;;;;;;;;;;3179:282;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3179:282:8;;;;;;;7273:337;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;7273:337:8;;;;;8596:252;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;8596:252:8;;;;;625:49;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;625:49:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;625:49:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9513:115;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9513:115:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;9513:115:8;;;;;;;;;;;;;;;;;10731:676;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;10731:676:8;;;;;;;;;;;;;;;9807:575;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;9807:575:8;;;;;851:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;851:28:8;;;;4878:212;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4878:212:8;;;;;5699:349;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5699:349:8;;;;;5349:244;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5349:244:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5349:244:8;;-1:-1:-1;5349:244:8;;-1:-1:-1;;;;;;;5349:244:8;78:40;;8:9:-1;5:2;;;30:1;27;20:12;5:2;78:40:8;;;;825:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;825:20:8;;;;4248:459;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4248:459:8;;;;;;;;;;;;6582:540;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6582:540:8;;;;;796:23;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;796:23:8;:::o;3584:465::-;3732:6;1046:10;1068:4;1046:27;1042:50;;1087:5;;;1042:50;1280:14;;;;;;;:7;:14;;;;;;3674:5;;1280:14;;1279:15;1275:38;;;1308:5;;;1275:38;3695:14;;;3712:5;3695:14;;;:7;:14;;;;;:22;;-1:-1:-1;;3695:22:8;;;3712:5;-1:-1:-1;3727:170:8;3744:6;:13;-1:-1:-1;;3744:17:8;3742:19;;3727:170;;;3797:5;3784:18;;:6;3791:1;3784:9;;;;;;;;;;;;;;;;;;;;;;:18;3780:117;;;3834:6;3841:13;;-1:-1:-1;;3841:17:8;;;3834:25;;;;;;;;;;;;;;;;3822:6;:9;;3834:25;;;;;3829:1;;3822:9;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;3877:5;;3780:117;3763:3;;;;;3727:170;;;3906:6;:18;;-1:-1:-1;;3906:18:8;;;;;;:::i;:::-;-1:-1:-1;3949:6:8;:13;3938:8;;:24;3934:74;;;3994:6;:13;3976:32;;:17;:32::i;:::-;4023:19;;;;;;;;;;;1102:1;3584:465;;:::o;6172:296::-;6255:10;1280:14;;;;:7;:14;;;;;;;;1279:15;1275:38;;;1308:5;;;1275:38;1554:28;;;;:13;:28;;;;;;;;6300:10;1554:35;;;;;;;;;6285:13;;6300:10;1554:35;;1553:36;1549:59;;;1603:5;;;1549:59;1836:12;:27;;;;;;;;;;:36;;;6332:13;;1836:36;;1832:59;;;1886:5;;;1832:59;6404:5;6361:28;;;:13;:28;;;;;;;;6390:10;6361:40;;;;;;;;:48;;-1:-1:-1;;6361:48:8;;;6424:37;6361:28;;6424:37;;;1618:1;1323;;6172:296;;:::o;750:40::-;;;;;;;;;;;;;;;:::o;680:64::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;9110:319::-;9217:10;;9243:179;9260:16;;9258:1;:18;9243:179;;;9302:7;:36;;;;-1:-1:-1;9314:12:8;:15;;;;;;;;;;:24;;;;;9313:25;9302:36;:92;;;;9358:8;:36;;;;-1:-1:-1;9370:12:8;:15;;;;;;;;;;:24;;;;;9358:36;9295:127;;;9421:1;9412:10;;;;9295:127;9278:3;;9243:179;;;9110:319;;;;;:::o;3179:282::-;1046:10;1068:4;1046:27;1042:50;;1087:5;;;1042:50;1172:14;;;;;;;:7;:14;;;;;;3272:5;;1172:14;;1168:37;;;1200:5;;;1168:37;3295:5;1964:13;;;;1960:36;;;1991:5;;;1960:36;3327:6;:13;;;;3343:1;3327:17;3346:8;;117:1;2096:10;:28;:66;;;;2152:10;2140:9;:22;2096:66;:96;;;-1:-1:-1;2178:14:8;;2096:96;:127;;;-1:-1:-1;2208:15:8;;2096:127;2089:153;;;2237:5;;;2089:153;3370:14;;;;;;;:7;:14;;;;;;:21;;-1:-1:-1;;3370:21:8;3387:4;3370:21;;;;;;3401:6;27:10:-1;;23:18;;;45:23;;3401:18:8;;;;;;;;;;;;3434:20;;;3370:14;3434:20;2006:1;;1215;1102;3179:282;:::o;7273:337::-;7363:4;;;7407:197;7424:6;:13;7422:15;;7407:197;;;7462:28;;;;:13;:28;;;;;7491:6;:9;;7462:28;;;7498:1;;7491:9;;;;;;;;;;;;;;;;;;;;7462:39;;;;;;;;;;;;;;;7458:71;;;7528:1;7519:10;;;;7458:71;7556:8;;7547:5;:17;7543:50;;;7589:4;7582:11;;;;7543:50;7439:3;;7407:197;;;7273:337;;;;;:::o;8596:252::-;8695:10;;8721:120;8738:6;:13;8736:15;;8721:120;;;8774:28;;;;:13;:28;;;;;8803:6;:9;;8774:28;;;8810:1;;8803:9;;;;;;;;;;;;;;;;;;;;8774:39;;;;;;;;;;;;;;;8770:71;;;8840:1;8831:10;;;;8770:71;8753:3;;8721:120;;;8596:252;;;;:::o;625:49::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;625:49:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;625:49:8;;;;;;;-1:-1:-1;;625:49:8;;;:::o;9513:115::-;9583:9;9615:6;9608:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9513:115;;:::o;10731:676::-;10856:22;10894:32;10967:10;10991:6;10940:16;;10929:28;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;10929:28:8;;10894:63;;10980:1;10967:14;;11014:1;11012:3;;11007:250;11019:16;;11017:1;:18;11007:250;;;11061:7;:36;;;;-1:-1:-1;11073:12:8;:15;;;;;;;;;;:24;;;;;11072:25;11061:36;:92;;;;11117:8;:36;;;;-1:-1:-1;11129:12:8;:15;;;;;;;;;;:24;;;;;11117:36;11054:203;;;11213:1;11185:18;11204:5;11185:25;;;;;;;;;;;;;;;;;;:29;11241:1;11232:10;;;;;11054:203;11037:3;;11007:250;;;11300:4;11295:2;:9;11284:21;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;11284:21:8;;11266:39;;11322:4;11320:6;;11315:85;11330:2;11328:1;:4;11315:85;;;11379:18;11398:1;11379:21;;;;;;;;;;;;;;;;;;11351:15;11371:4;11367:1;:8;11351:25;;;;;;;;;;;;;;;;;;:49;11334:3;;11315:85;;;10731:676;;;;;;;;;:::o;9807:575::-;9902:24;9942:34;10017:10;10041:6;9993;:13;;;;9979:28;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;9979:28:8;;9942:65;;10030:1;10017:14;;10064:1;10062:3;;10057:186;10069:6;:13;10067:15;;10057:186;;;10105:28;;;;:13;:28;;;;;10134:6;:9;;10105:28;;;10141:1;;10134:9;;;;;;;;;;;;;;;;;;;;10105:39;;;;;;;;;;;;;;;10101:142;;;10191:6;:9;;10198:1;;10191:9;;;;;;;;;;;;;;;;10164:24;;10191:9;;;;;10164:17;;10182:5;;10164:24;;;;;;:36;;;;:24;;;;;;;;;;:36;10227:1;10218:10;;;;;10101:142;10084:3;;10057:186;;;10283:5;10269:20;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;10269:20:8;;10252:37;;10306:1;10304:3;;10299:76;10311:5;10309:1;:7;10299:76;;;10355:17;10373:1;10355:20;;;;;;;;;;;;;;;;;;10335:14;10350:1;10335:17;;;;;;;;;;:40;;;;:17;;;;;;;;;;:40;10318:3;;10299:76;;;9807:575;;;;;;:::o;851:28::-;;;;:::o;4878:212::-;1046:10;1068:4;1046:27;1042:50;;1087:5;;;1042:50;4980:6;:13;4995:9;117:1;2096:28;;;:66;;;2152:10;2140:9;:22;2096:66;:96;;;-1:-1:-1;2178:14:8;;2096:96;:127;;;-1:-1:-1;2208:15:8;;2096:127;2089:153;;;2237:5;;;2089:153;5020:8;:20;;;5055:28;;;;;;;;;;;;;;;;;1102:1;;4878:212;:::o;5699:349::-;5782:10;1280:14;;;;:7;:14;;;;;;;;1279:15;1275:38;;;1308:5;;;1275:38;1398:12;:27;;;;;;;;;;:39;5820:13;;1398:39;;:44;1394:67;;;1456:5;;;1394:67;1703:28;;;;:13;:28;;;;;;;;5871:10;1703:35;;;;;;;;;5856:13;;5871:10;1703:35;;1699:58;;;1752:5;;;1699:58;5897:28;;;;5940:4;5897:28;;;;;;;;5926:10;5897:40;;;;;;;;:47;;-1:-1:-1;;5897:47:8;;;;;;;5959:39;;5897:28;;5959:39;;;6008:33;6027:13;6008:18;:33::i;:::-;1471:1;;1323;5699:349;;:::o;5349:244::-;5453:18;5503:40;5518:11;5531:5;5538:4;5503:14;:40::i;:::-;5487:56;;5553:33;5572:13;5553:18;:33::i;:::-;5349:244;;;;;:::o;78:40::-;117:1;78:40;:::o;825:20::-;;;;:::o;4248:459::-;4419:6;1046:10;1068:4;1046:27;1042:50;;1087:5;;;1042:50;1280:14;;;;;;;:7;:14;;;;;;4357:5;;1280:14;;1279:15;1275:38;;;1308:5;;;1275:38;1172:14;;;;;;;:7;:14;;;;;;4390:8;;1172:14;;1168:37;;;1200:5;;;1168:37;4426:1;4419:8;;4414:149;4431:6;:13;4429:15;;4414:149;;;4480:5;4467:18;;:6;4474:1;4467:9;;;;;;;;;;;;;;;;;;;;;;:18;4463:100;;;4517:8;4505:6;4512:1;4505:9;;;;;;;;;;;;;;;;;;:20;;;;;;;;;;;;;;;;;;4543:5;;4463:100;4446:3;;;;;4414:149;;;4572:14;;;;4589:5;4572:14;;;:7;:14;;;;;;:22;;-1:-1:-1;;4572:22:8;;;;;;4604:17;;;;;;;;:24;;;;;-1:-1:-1;4604:24:8;;;;4643:19;;4572:14;;4643:19;;;4677:23;;;;;;;;;;;1323:1;1102;4248:459;;;:::o;6582:540::-;6740:30;1836:27;;;;;;;;;;:36;;;6665:13;;1836:36;;1832:59;;;1886:5;;;1832:59;6698:26;6710:13;6698:11;:26::i;:::-;6694:422;;;6773:12;:27;;;;;;;;;;;;6814:19;;;:26;;-1:-1:-1;;6814:26:8;6836:4;6814:26;;;;;;6858:22;;6892:16;;;;6858:68;;6910:15;;;;6858:68;;6773:27;;-1:-1:-1;6858:22:8;;;;;6892:16;6910:15;;6858:68;;;;6910:15;;-1:-1:-1;;6858:68:8;;;;6814:26;6858:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6854:252;;;6949:24;;6959:13;;6949:24;;;;;6854:252;;;7015:31;;7032:13;;7015:31;;;;;7064:19;;;:27;;-1:-1:-1;;7064:27:8;;;6854:252;6582:540;;;:::o;7943:456::-;8075:18;8045:11;1964:13;;;;1960:36;;;1991:5;;;1960:36;8125:16;;8181:140;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8181:140:8;;;;;;8151:27;;;;;;;;;;:170;;;;;;;;;;;;;;;-1:-1:-1;8151:170:8;;;;;;;8125:16;;-1:-1:-1;8181:140:8;;8151:27;;:170;;;;;;;;;;:::i;:::-;-1:-1:-1;8151:170:8;;;;;;;;;;;;-1:-1:-1;;8151:170:8;;;;;;;;;;8331:16;:21;;-1:-1:-1;8331:21:8;;;8367:25;;8378:13;;8367:25;;-1:-1:-1;;8367:25:8;7943:456;;;;;;:::o;47:11362::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;47:11362:8;;;-1:-1:-1;47:11362:8;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;",
  "source": "pragma solidity ^0.4.18;\n\n// A multisig wallet\ncontract TrustFeedWallet {\n    uint constant public MAX_OWNER_COUNT = 4;\n\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        if (msg.sender != address(this))\n            throw;\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        if (isOwner[owner])\n            throw;\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        if (!isOwner[owner])\n            throw;\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        if (transactions[transactionId].destination == 0)\n            throw;\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        if (!confirmations[transactionId][owner])\n            throw;\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        if (confirmations[transactionId][owner])\n            throw;\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        if (transactions[transactionId].executed)\n            throw;\n        _;\n    }\n\n    modifier notNull(address _address) {\n        if (_address == 0)\n            throw;\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        if (   ownerCount > MAX_OWNER_COUNT\n            || _required > ownerCount\n            || _required == 0\n            || ownerCount == 0)\n            throw;\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        public\n        payable\n    {\n        if (msg.value > 0)\n            emit Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    constructor(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++) {\n            if (isOwner[_owners[i]] || _owners[i] == 0)\n                throw;\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        emit OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        emit OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param owner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        emit OwnerRemoval(owner);\n        emit OwnerAddition(newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        emit RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        emit Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage tansaction = transactions[transactionId];\n            tansaction.executed = true;\n            if (tansaction.destination.call.value(tansaction.value)(tansaction.data))\n                emit Execution(transactionId);\n            else {\n                emit ExecutionFailure(transactionId);\n                tansaction.executed = false;\n            }\n        }\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}\n\n",
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-10-11T07:52:23.613Z"
}
